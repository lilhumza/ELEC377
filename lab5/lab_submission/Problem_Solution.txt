Problem and Solution: The purpose of this lab is to exploit security vulnerabilities in a server program through a standard buffer overflow. While the technical aspect focuses on the exploitation of the server, the lab also implores a more ethical understanding as the source of information for brute forcing the passwords are social media posts with personal information. The buffer overflow intends to retrieve all the environment variables in the server, thereafter retrieve the MD5 hash for the usersâ€™ password, and finally brute force passwords to match the MD5 hash.

The development of the selfcomp.c revolves around first running the file, adding x chars into the compromise1 array until the core is dumped such that the rbp register shows the hex value of the marker string (MNOPWXYZ). Thereafter the compromise array is developed with the implementation of the NASM shell exploit. More details about what the exploit does and its development can be found in the exploit subsection, further in the documentation. With the integration of the exploit code, as well as the padding needed to reach the correct size of 159, the exploit introduction was completed. The return address in the exploit was determined by the use of the GNU debugger, observing the core dump files to find the required information. Return Address Stack Pointer: 0x7fffffffe068 - 0x98 (152 Chars) = 0x7FFFFFFFDFD0. Thereafter compiling and running, the resultant output as detailed in the testing documentation was the environment variables.

The development of the exploit: exploit.nasm entailed the use of AMD x86 assembly language, the biggest aid with the development was the pseudo code provided in the lab documentation to build the shell code. What the shell code does is manipulate a vulnerability through the stack buffer overflow that allows for the exploit to access the memory on the target machine, execute and download codes and commands on the remote such that there is a mass of data that can be explored for the later use case of brute forcing.

The development of the client.c similar to selfcomp.c revolves around first running the file, adding x chars into the compromise1 array until the core is dumped such that the rbp register shows the hex value of the marker string (MNOPWXYZ). Thereafter the compromise array is developed with the implementation of the NASM shell exploit, as well as the padding needed to reach the correct size of 224. The return address was retired by observing the core dump to find the required information. Return Address Stack Pointer is the same as indicated in the lab instructions documentation, and hence not explored nor validated using the debugger on the core dump. Thereafter compiling and running, the resultant output as detailed in the testing documentation was the environment variables.

The scraping of information and the related use of that information for brute force guessing the password as detailed in the testing documentation and more specifically in the test results testing password.txt file.

Further documentation regarding the testing and the results can be found in the testing documentation.
